
#ifndef NOISE_NOISEMAP_HPP
#define NOISE_NOISEMAP_HPP

#include <Constants.hpp>

namespace noise::utils
{
	/// Implements a Noise map, a 2-dimensional array of floating-point
	/// values.
	///
	/// A Noise map is designed to store coherent-Noise values generated by a
	/// Noise module, although it can store values from any source.  A Noise
	/// map is often used as a terrain height map or a grayscale texture.
	///
	/// The size (width and height) of the Noise map can be specified during
	/// object construction or at any other time.
	///
	/// The GetValue() and SetValue() methods can be used to access individual
	/// values stored in the Noise map.
	///
	/// This class manages its own memory.  If you copy a Noise map object
	/// into another Noise map object, the original contents of the Noise map
	/// object will be freed.
	///
	/// If you specify a new size for the Noise map and the new size is
	/// smaller than the current size, the allocated memory will not be
	/// reallocated.
	/// Call ReclaimMem() to reclaim the wasted memory.
	///
	/// <b>Border Values</b>
	///
	/// All of the values outside of the Noise map are assumed to have a
	/// common value known as the <i>border value</i>.
	///
	/// To set the border value, call the SetBorderValue() method.
	///
	/// The GetValue() method returns the border value if the specified value
	/// lies outside of the Noise map.
	///
	/// <b>Internal Noise Map Structure</b>
	///
	/// Internally, the values are organized into horizontal rows called @a
	/// slabs.  Slabs are ordered from bottom to top.
	///
	/// Each slab contains a contiguous row of values in memory.  The values
	/// in a slab are organized left to right.
	///
	/// The offset between the starting points of any two adjacent slabs is
	/// called the <i>stride amount</i>.  The stride amount is measured by
	/// the number of @a float values between these two starting points, not
	/// by the number of bytes.  For efficiency reasons, the stride is often a
	/// multiple of the machine word size.
	///
	/// The GetSlabPtr() and GetConstSlabPtr() methods allow you to retrieve
	/// pointers to the slabs themselves.
	class NoiseMap
	{

	public:

		/// Constructor.
		///
		/// Creates an empty Noise map.
		NoiseMap();

		/// Constructor.
		///
		/// @param width The width of the new Noise map.
		/// @param height The height of the new Noise map.
		///
		/// @pre The width and height values are positive.
		/// @pre The width and height values do not exceed the maximum
		/// possible width and height for the Noise map.
		///
		/// @throw Noise::ExceptionInvalidParam See the preconditions.
		/// @throw Noise::ExceptionOutOfMemory Out of memory.
		///
		/// Creates a Noise map with uninitialized values.
		///
		/// It is considered an error if the specified dimensions are not
		/// positive.
		NoiseMap(int width, int height);

		/// Copy constructor.
		///
		/// @throw Noise::ExceptionOutOfMemory Out of memory.
		NoiseMap(const NoiseMap& rhs);

		/// Destructor.
		///
		/// Frees the allocated memory for the Noise map.
		~NoiseMap();

		/// Assignment operator.
		///
		/// @throw Noise::ExceptionOutOfMemory Out of memory.
		///
		/// @returns Reference to self.
		///
		/// Creates a copy of the Noise map.
		NoiseMap& operator=(const NoiseMap& rhs);

		/// Clears the Noise map to a specified value.
		///
		/// @param value The value that all positions within the Noise map are
		/// cleared to.
		void Clear(float value);

		/// Returns the value used for all positions outside of the Noise map.
		///
		/// @returns The value used for all positions outside of the Noise
		/// map.
		///
		/// All positions outside of the Noise map are assumed to have a
		/// common value known as the <i>border value</i>.
		float GetBorderValue() const
		{
			return m_borderValue;
		}

		/// Returns a const pointer to a slab.
		///
		/// @returns A const pointer to a slab at the position (0, 0), or
		/// @a NULL if the Noise map is empty.
		const float* GetConstSlabPtr() const
		{
			return m_pNoiseMap;
		}

		/// Returns a const pointer to a slab at the specified row.
		///
		/// @param row The row, or @a y coordinate.
		///
		/// @returns A const pointer to a slab at the position ( 0, @a row ),
		/// or @a NULL if the Noise map is empty.
		///
		/// @pre The coordinates must exist within the bounds of the Noise
		/// map.
		///
		/// This method does not perform bounds checking so be careful when
		/// calling it.
		const float* GetConstSlabPtr(int row) const
		{
			return GetConstSlabPtr(0, row);
		}

		/// Returns a const pointer to a slab at the specified position.
		///
		/// @param x The x coordinate of the position.
		/// @param y The y coordinate of the position.
		///
		/// @returns A const pointer to a slab at the position ( @a x, @a y ),
		/// or @a NULL if the Noise map is empty.
		///
		/// @pre The coordinates must exist within the bounds of the Noise
		/// map.
		///
		/// This method does not perform bounds checking so be careful when
		/// calling it.
		const float* GetConstSlabPtr(int x, int y) const
		{
			return m_pNoiseMap + (size_t)x + (size_t)m_stride * (size_t)y;
		}

		/// Returns the height of the Noise map.
		///
		/// @returns The height of the Noise map.
		int GetHeight() const
		{
			return m_height;
		}

		/// Returns the amount of memory allocated for this Noise map.
		///
		/// @returns The amount of memory allocated for this Noise map.
		///
		/// This method returns the number of @a float values allocated.
		size_t GetMemUsed() const
		{
			return m_memUsed;
		}

		/// Returns a pointer to a slab.
		///
		/// @returns A pointer to a slab at the position (0, 0), or @a NULL if
		/// the Noise map is empty.
		float* GetSlabPtr()
		{
			return m_pNoiseMap;
		}

		/// Returns a pointer to a slab at the specified row.
		///
		/// @param row The row, or @a y coordinate.
		///
		/// @returns A pointer to a slab at the position ( 0, @a row ), or
		/// @a NULL if the Noise map is empty.
		///
		/// @pre The coordinates must exist within the bounds of the Noise
		/// map.
		///
		/// This method does not perform bounds checking so be careful when
		/// calling it.
		float* GetSlabPtr(int row)
		{
			return GetSlabPtr(0, row);
		}

		/// Returns a pointer to a slab at the specified position.
		///
		/// @param x The x coordinate of the position.
		/// @param y The y coordinate of the position.
		///
		/// @returns A pointer to a slab at the position ( @a x, @a y ) or
		/// @a NULL if the Noise map is empty.
		///
		/// @pre The coordinates must exist within the bounds of the Noise
		/// map.
		///
		/// This method does not perform bounds checking so be careful when
		/// calling it.
		float* GetSlabPtr(int x, int y)
		{
			return m_pNoiseMap + (size_t)x + (size_t)m_stride * (size_t)y;
		}

		/// Returns the stride amount of the Noise map.
		///
		/// @returns The stride amount of the Noise map.
		///
		/// - The <i>stride amount</i> is the offset between the starting
		///   points of any two adjacent slabs in a Noise map.
		/// - The stride amount is measured by the number of @a float values
		///   between these two points, not by the number of bytes.
		int GetStride() const
		{
			return m_stride;
		}

		/// Returns a value from the specified position in the Noise map.
		///
		/// @param x The x coordinate of the position.
		/// @param y The y coordinate of the position.
		///
		/// @returns The value at that position.
		///
		/// This method returns the border value if the coordinates exist
		/// outside of the Noise map.
		float GetValue(int x, int y) const;

		/// Returns the width of the Noise map.
		///
		/// @returns The width of the Noise map.
		int GetWidth() const
		{
			return m_width;
		}

		/// Reallocates the Noise map to recover wasted memory.
		///
		/// @throw Noise::ExceptionOutOfMemory Out of memory.  (Yes, this
		/// method can return an out-of-memory exception because two Noise
		/// maps will temporarily exist in memory during this call.)
		///
		/// The contents of the Noise map is unaffected.
		void ReclaimMem();

		/// Sets the value to use for all positions outside of the Noise map.
		///
		/// @param borderValue The value to use for all positions outside of
		/// the Noise map.
		///
		/// All positions outside of the Noise map are assumed to have a
		/// common value known as the <i>border value</i>.
		void SetBorderValue(float borderValue)
		{
			m_borderValue = borderValue;
		}

		/// Sets the new size for the Noise map.
		///
		/// @param width The new width for the Noise map.
		/// @param height The new height for the Noise map.
		///
		/// @pre The width and height values are positive.
		/// @pre The width and height values do not exceed the maximum
		/// possible width and height for the Noise map.
		///
		/// @throw Noise::ExceptionInvalidParam See the preconditions.
		/// @throw Noise::ExceptionOutOfMemory Out of memory.
		///
		/// On exit, the contents of the Noise map are undefined.
		///
		/// If the @a OUT_OF_MEMORY exception occurs, this Noise map object
		/// becomes empty.
		///
		/// If the @a INVALID_PARAM exception occurs, the Noise map is
		/// unmodified.
		void SetSize(int width, int height);

		/// Sets a value at a specified position in the Noise map.
		///
		/// @param x The x coordinate of the position.
		/// @param y The y coordinate of the position.
		/// @param value The value to set at the given position.
		///
		/// This method does nothing if the Noise map object is empty or the
		/// position is outside the bounds of the Noise map.
		void SetValue(int x, int y, float value);

		/// Takes ownership of the buffer within the source Noise map.
		///
		/// @param source The source Noise map.
		///
		/// On exit, the source Noise map object becomes empty.
		///
		/// This method only moves the buffer pointer so this method is very
		/// quick.
		void TakeOwnership(NoiseMap& source);

	private:

		/// Returns the minimum amount of memory required to store a Noise map
		/// of the specified size.
		///
		/// @param width The width of the Noise map.
		/// @param height The height of the Noise map.
		///
		/// @returns The minimum amount of memory required to store the Noise
		/// map.
		///
		/// The returned value is measured by the number of @a float values
		/// required to store the Noise map, not by the number of bytes.
		size_t CalcMinMemUsage(int width, int height) const
		{
			return CalcStride((size_t)width) * (size_t)height;
		}

		/// Calculates the stride amount for a Noise map.
		///
		/// @param width The width of the Noise map.
		///
		/// @returns The stride amount.
		///
		/// - The <i>stride amount</i> is the offset between the starting
		///   points of any two adjacent slabs in a Noise map.
		/// - The stride amount is measured by the number of @a float values
		///   between these two points, not by the number of bytes.
		size_t CalcStride(int width) const
		{
			return (size_t)(((width + RASTER_STRIDE_BOUNDARY - 1)
							 / RASTER_STRIDE_BOUNDARY) * RASTER_STRIDE_BOUNDARY);
		}

		/// Copies the contents of the buffer in the source Noise map into
		/// this Noise map.
		///
		/// @param source The source Noise map.
		///
		/// @throw Noise::ExceptionOutOfMemory Out of memory.
		///
		/// This method reallocates the buffer in this Noise map object if
		/// necessary.
		///
		/// @warning This method calls the standard library function
		/// @a memcpy, which probably violates the DMCA because it can be used
		//. to make a bitwise copy of anything, like, say, a DVD.  Don't call
		/// this method if you live in the USA.
		void CopyNoiseMap(const NoiseMap& source);

		/// Resets the Noise map object.
		///
		/// This method is similar to the InitObj() method, except this method
		/// deletes the buffer in this Noise map.
		void DeleteNoiseMapAndReset();

		/// Initializes the Noise map object.
		///
		/// @pre Must be called during object construction.
		/// @pre The Noise map buffer must not exist.
		void InitObj();

		/// Value used for all positions outside of the Noise map.
		float m_borderValue;

		/// The current height of the Noise map.
		int m_height;

		/// The amount of memory allocated for this Noise map.
		///
		/// This value is equal to the number of @a float values allocated for
		/// the Noise map, not the number of bytes.
		size_t m_memUsed;

		/// A pointer to the Noise map buffer.
		float* m_pNoiseMap;

		/// The stride amount of the Noise map.
		int m_stride;

		/// The current width of the Noise map.
		int m_width;

	};
}

#endif //NOISE_NOISEMAP_HPP
